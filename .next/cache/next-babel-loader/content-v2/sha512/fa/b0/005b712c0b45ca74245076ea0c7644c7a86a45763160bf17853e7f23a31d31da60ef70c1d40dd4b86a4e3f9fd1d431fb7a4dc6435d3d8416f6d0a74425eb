{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport Layout from \"../../components/Layout\";\nimport QrPrompt from \"../../components/QrPrompt\";\nimport MyStepper from \"../../components/Stepper\";\nimport SSE from \"../../components/Sse\";\n\nconst message = require(\"uport-transports\").message.util;\n\nconst transport = require(\"uport-transports\").transport;\n\nimport { requestVCgeneration } from \"../../store\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport isMobile from \"../../helpers/isMobile\";\nimport Router from \"next/router\";\n\nclass Issue extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.userSelection = props.userSelection;\n    this.endpoint = props.endpoint;\n    this.requestVC = this.requestVC.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.userSelection.length > 0) {\n      this.requestVC();\n    }\n  }\n\n  requestVC() {\n    const {\n      vcType\n    } = this.props.router.query;\n    console.log(`will request the creation of a requestVC`);\n    console.log(`[vcType.js] :: the pathi is ${vcType}`);\n    let url = this.props.baseUrl ? `${this.props.baseUrl}issueVCReq` : `/issueVCReq`;\n    this.props.makeIssueRequest(url, this.props.userSelection, vcType, isMobile());\n  }\n\n  render() {\n    let result;\n\n    if (this.props.userSelection.length > 0) {\n      if (this.props.vcSent) {\n        result = __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"col\",\n          style: {\n            marginTop: \"3rem\",\n            marginBottom: \"3rem\",\n            textAlign: \"center\"\n          }\n        }, __jsx(\"img\", {\n          alt: \"\",\n          src: \"/finished.png\",\n          style: {\n            maxWidth: \"15rem\",\n            display: \"block\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\"\n          }\n        }), __jsx(\"p\", null, \"The verifiable credential has been sent to your mobile phone succesfully!!\", __jsx(\"br\", null), \"You should receive a notification, prompting you to store it, very soon!\")));\n      }\n\n      if (this.props.qrData && isMobile()) {\n        const urlTransport = transport.url.send();\n        urlTransport(this.props.qrData); //TODO maybe add a check here with SSE if the\n        // user received the VC?\n\n        Router.push(`${this.props.baseUrl}`);\n      }\n\n      if (this.props.qrData && !this.props.vcSent) {\n        let sseEndpoint = this.props.baseUrl ? `${this.props.endpoint}/${this.props.baseUrl}` : this.props.endpoint;\n        result = __jsx(\"div\", null, __jsx(QrPrompt, {\n          qrData: this.props.qrData,\n          message: \"SEAL is requesting to connect your uPort wallet:\",\n          permissions: [\"Push Notifications\"],\n          baseUrl: this.props.baseUrl\n        }), __jsx(SSE, {\n          uuid: this.props.uuid,\n          endpoint: sseEndpoint\n        }));\n      }\n\n      if (this.props.isFetching && !this.props.qrData && !this.props.vcSent) {\n        result = __jsx(\"div\", {\n          className: \"row\"\n        }, \"Generating QR code please wait\");\n      }\n\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: this.props.stepperSteps,\n        activeNum: this.props.stepperSteps.length - 1\n      }))), result, __jsx(Row, null, __jsx(\"div\", {\n        className: \"col\",\n        style: {\n          marginTop: \"1.5rem\"\n        }\n      }, __jsx(Link, {\n        href: this.props.baseUrl ? `${this.props.baseUrl}` : \"/\"\n      }, __jsx(Button, {\n        variant: \"primary\",\n        className: \"float-right\"\n      }, \"Home\")))));\n    } else {\n      return __jsx(Layout, null, __jsx(\"div\", {\n        className: \"row\"\n      }, \"user made no selections!\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(\"issue.js:: mapping state to props\");\n  console.log(state);\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    uuid: state.uuid,\n    // userEidas: state.userEidas, // the eIDAS attributes of the user\n    // userEduGain: state.userEduGain, // the eduGain attributes of the user\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    vcSent: state.vcSent,\n    stepperSteps: state.stepperSteps,\n    endpoint: state.endpoint,\n    baseUrl: state.baseUrl\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeIssueRequest: (url, data, vcType, isMobile = false) => {\n      dispatch(requestVCgeneration(url, data, vcType, isMobile));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Issue));","map":null,"metadata":{},"sourceType":"module"}