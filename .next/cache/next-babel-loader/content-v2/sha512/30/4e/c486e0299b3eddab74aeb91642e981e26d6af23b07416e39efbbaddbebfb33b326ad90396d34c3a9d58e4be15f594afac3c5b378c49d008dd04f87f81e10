{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setDidCallback, makeOnlyConnectionRequest, setEndpoint, setBaseUrl, setSealSession, setServerSessionId } from \"../../store\";\nimport Layout from \"../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../components/Stepper\";\nimport HomeButton from \"../../components/HomeButton\";\nimport IssueVCButton from \"../../components/IssueVCButton\";\nimport PairOrCard from \"../../components/PairOrCard\";\n\nclass DisplayDidAuth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let sealSession;\n    let callback;\n\n    if (true) {\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      sealSession = req.session.sealSession;\n      callback = req.session.callback;\n    } else {\n      sealSession = reduxStore.getState().sealSession;\n      callback = reduxStore.getState().callback;\n    }\n\n    reduxStore.dispatch(setSealSession(sealSession));\n    reduxStore.dispatch(setDidCallback(callback));\n    return {\n      qrData: reduxStore.getState().qrData,\n      sealSession: reduxStore.getState().sealSession,\n      callback: reduxStore.getState().callback\n    };\n  }\n\n  componentDidMount() {\n    // generated the connectionRequest\n    this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl);\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID) {\n      //if DID auth is completed\n      // redirect to the callbackAddress\n      window.location.href = this.props.callback;\n    }\n  }\n\n  render() {\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }];\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.sealSession,\n      card: __jsx(\"dib\", null, \"DID authentication completed successfully\"),\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      serverSessionId: this.props.serverSessionId\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: 1\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    sealSession: state.sealSession,\n    callback: state.didAuthCallback,\n    serverSessionId: state.serverSessionId\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    makeConnectionRequest: (sealSession, baseUrl) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    setCallback: callback => {\n      dispatch(setDidCallback(callback));\n    },\n    setSealSession: session => {\n      dispatch(setSealSession(session));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayDidAuth);","map":null,"metadata":{},"sourceType":"module"}