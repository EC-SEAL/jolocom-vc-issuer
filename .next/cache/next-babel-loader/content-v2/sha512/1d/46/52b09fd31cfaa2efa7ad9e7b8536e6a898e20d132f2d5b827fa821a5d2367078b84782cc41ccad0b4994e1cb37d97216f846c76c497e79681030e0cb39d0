{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEdugainUriPort, setEdugainRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueEdugain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithAuthentication = this.proceedWithAuthentication.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.edugain !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`edugainjs:: in the server the seal session is:: ${req.session.sealSession}`);\n      reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n      reduxStore.dispatch(setEdugainRedirectUri(req.edugainRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      console.log(\"edugain.js:: will setSessionData\");\n      console.log(userSessionData);\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      console.log(\"edugain.js:: will set completeDIDAuth\");\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n\n    if (sealSession) {\n      console.log(\"edugain.js:: will set sealSession\");\n      console.log(sealSession);\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"edugain.js:: componentDIDMount\");\n\n    if (this.props.sessionData && this.props.sessionData.edugain) {\n      console.log(`edugain.js :: the data is ${this.props.sessionData.edugain}`);\n      let toSelect = [this.props.sessionData.edugain];\n      this.props.setEdugainToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"edugain\", isMobile()); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"edugain\", isMobile());\n      }\n    }\n\n    axios.get(`${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`).then(data => {\n      axios.post(`${this.props.baseUrl}seal/update-session`, {\n        sessionId: this.props.sealSession,\n        variableName: \"ClientCallbackAddr\",\n        variableValue: `${this.props.edugainRedirectUri}?msToken=${data.data.additionalData}`\n      }).then(data => {\n        //the edugain ms expects an empty datastore object to exist in session\n        axios.post(`${this.props.baseUrl}seal/update-session`, {\n          sessionId: this.props.sealSession,\n          variableName: \"dataStore\",\n          variableValue: JSON.stringify({})\n        }).then(data => {\n          console.log(\"edugain.js:: session updated\");\n        });\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(`edugain.js:: componentDidUpdate ${this.hasRequiredAttributes}`);\n\n    if (this.props.DID & !this.hasRequiredAttributes) {\n      //if DID auth is completed\n      // register the callbackUri to the SessionManager\n      axios.get(`${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`).then(data => {\n        axios.post(`${this.props.baseUrl}seal/update-session`, {\n          sessionId: this.props.sealSession,\n          variableName: \"ClientCallbackAddr\",\n          variableValue: `${this.props.edugainRedirectUri}?msToken=${data.data.additionalData}`\n        }).then(data => {\n          //the edugain ms expects an empty datastore object to exist in session\n          axios.post(`${this.props.baseUrl}seal/update-session`, {\n            sessionId: this.props.sealSession,\n            variableName: \"dataStore\",\n            variableValue: JSON.stringify({})\n          }).then(data => {\n            console.log(\"edugain.js:: session updated\");\n          });\n        });\n      });\n    }\n  }\n\n  proceedWithAuthentication() {\n    axios.get(`${this.props.baseUrl}/vc/make-edugain-token?sessionId=${this.props.sealSession}`).then(data => {\n      // console.log(`the data is::`);\n      // console.log(data);\n      let theUrl = this.props.edugainUri.indexOf(\"https\" >= 0) ? this.props.edugainUri : `http://${this.props.edugainUri}`;\n      window.location.href = `${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"eduGAIN\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sealSession\n      }));\n    }\n\n    let edugainLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n      onClick: this.proceedWithAuthentication\n    }, \"eduGAIN\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"eduGAIN\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n      ,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"SEAL-EDUGAIN\"\n    });\n\n    let edugainCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an EDUGAIN based Verifiable Credential\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, edugainLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: edugainCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    edugainUri: state.edugainUri,\n    edugainPort: state.edugainPort,\n    endpoint: state.endpoint,\n    edugainRedirectUri: state.edugainRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEdugainToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEdugain: (uri, data) => {\n      dispatch(setEdugainUriPort(uri, data));\n    },\n    setEdugainRedirect: uri => {\n      dispatch(setEdugainRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueEdugain);","map":null,"metadata":{},"sourceType":"module"}