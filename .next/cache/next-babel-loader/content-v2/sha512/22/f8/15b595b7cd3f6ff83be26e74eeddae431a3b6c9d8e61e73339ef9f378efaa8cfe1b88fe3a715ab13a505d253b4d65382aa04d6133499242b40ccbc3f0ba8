{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { connect } from \"react-redux\"; // get our fontawesome imports\n\nimport { faArrowCircleRight, faArrowCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { loginClicked, setUserAttributeSelection, setSessionData, setServerSessionId, setEndpoint, increaseCardIndex, decreaseCardIndex, setBaseUrl } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\n\nconst jwt = require(\"jsonwebtoken\");\n\nimport { getPath } from \"../helpers/pathHelper\";\nimport isMobile from \"../helpers/isMobile\";\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.clickMe = this.clickMe.bind(this);\n    this.increaseCardIndex = this.increaseCardIndex.bind(this);\n    this.decreaseCardIndex = this.decreaseCardIndex.bind(this);\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData; // this.userEidas = props.userEidas;\n    // this.userEduGain = props.userEduGain;\n\n    this.userSelection = props.userSelection;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    const serverIsFetching = reduxStore.getState().fetching; // console.log(`serverIsFetching ${serverIsFetching}`);\n\n    let userSessionData;\n    let serverSessionId;\n    let endpoint;\n    let baseUrl;\n\n    if (true) {\n      userSessionData = req.session.userData; // the user attributes\n\n      serverSessionId = req.session.id; // the sessionId that exists on the backend server\n      // this is stored on the redux store to use it on the client side components\n\n      endpoint = req.session.endpoint;\n      reduxStore.dispatch(setServerSessionId(serverSessionId));\n      reduxStore.dispatch(setEndpoint(endpoint));\n      baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\"; // console.log(`index.js setting baseurl to: ${baseUrl}`);\n\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        // console.log(`user data is defined already ${sessionData}`);\n        userSessionData = reduxStore.getState().sessionData;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    reduxStore.dispatch(setSessionData(userSessionData)); //add the userEidas data to the reduxstore to be able to get it from other componets as well\n\n    reduxStore.dispatch(setUserAttributeSelection([])); //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n    return {\n      isFetching: serverIsFetching,\n      sessionData: userSessionData,\n      userSelection: userSessionData ? userSessionData.userSelection : null,\n      qrData: reduxStore.getState().qrData,\n      baseurl: reduxStore.getState().baseUrl,\n      serverSessionId: reduxStore.getState().serverSessionId\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dispatch,\n      sessionData\n    } = this.props;\n  }\n\n  componentWillUnmount() {}\n\n  clickMe() {\n    this.dispatch(loginClicked());\n  }\n\n  increaseCardIndex() {\n    this.props.incCardIndex();\n  }\n\n  decreaseCardIndex() {\n    this.props.decCardIndex();\n  }\n\n  render() {\n    let cards = [__jsx(Card, {\n      style: {\n        minHeight: \"47rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an isStudent Verifiable Credential\"), __jsx(Card.Img, {\n      variant: \"top\",\n      src: getPath(\"student.png\")\n    }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate VC proving that your are a Student\"), __jsx(Card.Subtitle, {\n      className: \"mb-2 text-muted\"\n    }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"You will be issued a Verifiable Credential (VC) proving that you are a student. To do so you will need to authenticate over eIDAS and through an Academic Attribute Provider. \", __jsx(\"br\", null), \"SEAL link those attributes together.\"), __jsx(Card.Link, {\n      href: \"#\"\n    }, __jsx(Link, {\n      as: getPath(\"issue-is-student\"),\n      href: \"issue-is-student\"\n    }, __jsx(Button, {\n      variant: \"primary\"\n    }, \"Next\"))))), __jsx(Card, {\n      style: {\n        minHeight: \"47rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an eIDAS eID Verifiable Credential\"), __jsx(Card.Img, {\n      style: {\n        minHeight: \"18rem\"\n      },\n      variant: \"top\",\n      src: getPath(\"eID.png\")\n    }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate an eIDAS eID Verifiable Credential\"), __jsx(Card.Subtitle, {\n      className: \"mb-2 text-muted\"\n    }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"You will be required to authenticate over eIDAS in order to import your Personal Identnification information. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential based on your national eID.\"), __jsx(Card.Link, {\n      href: \"#\"\n    }, __jsx(Link // as={getPath(\"issue-eidas\")}\n    , {\n      href: `${this.props.baseUrl}vc/issue/eidas`\n    }, __jsx(Button, {\n      variant: \"primary\"\n    }, \"Next\"))))), __jsx(Card, {\n      style: {\n        minHeight: \"47rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue GR Ministry of Education based Verifiable Credential\"), __jsx(Card.Img, {\n      style: {\n        minHeight: \"18rem\"\n      },\n      variant: \"top\",\n      src: getPath(\"minedu.jpg\")\n    }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate a Verifiable Credential GR MinEdu AcademicId.\"), __jsx(Card.Subtitle, {\n      className: \"mb-2 text-muted\"\n    }, \"Available for Greek Students and Academic Staff only\"), __jsx(Card.Text, null, \"You will be required to authenticate using your University's Infrastructure. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential your Academic Attributes.\"), __jsx(Card.Link, {\n      href: \"#\"\n    }, __jsx(Link, {\n      href: `${this.props.baseUrl}issue-gr-academic-id`\n    }, __jsx(Button, {\n      variant: \"primary\"\n    }, \"Next\"))))), __jsx(Card, {\n      style: {\n        minHeight: \"47rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an eduGAIN Verifiable Credential\"), __jsx(Card.Img, {\n      style: {\n        minHeight: \"18rem\"\n      },\n      variant: \"top\",\n      src: getPath(\"edugain.png\")\n    }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate an eduGAIN eID Verifiable Credential\"), __jsx(Card.Subtitle, {\n      className: \"mb-2 text-muted\"\n    }, \"Available for all Students with Universities part of the eduGAIN Federation\"), __jsx(Card.Text, null, \"You will be required to authenticate using your University's Infrastructure. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential your Academic Attributes.\"), __jsx(Card.Link, {\n      href: \"#\"\n    }, \"Next\"))), __jsx(Card, {\n      style: {\n        minHeight: \"47rem\"\n      }\n    }, __jsx(Card.Header, null, \"Build Your Own Verifiable Credential\"), __jsx(Card.Img, {\n      style: {\n        minHeight: \"18rem\"\n      },\n      variant: \"top\",\n      src: getPath(\"puzzle.png\")\n    }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next select which attributes to include in a Credential.\"), __jsx(Card.Subtitle, {\n      className: \"mb-2 text-muted\"\n    }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"Connect with any of the available data sources, and then select which attributes to include in a new Verifiable Credential.\"), __jsx(Card.Link, null, __jsx(Link, {\n      as: getPath(\"attribute-selector\"),\n      href: \"attribute-selector\"\n    }, __jsx(Button, {\n      variant: \"primary\"\n    }, \"Next\")))))];\n    let isRightEnabled = cards.length / 3 > this.props.cardIndex;\n    let isLeftEnabled = this.props.cardIndex > 1;\n\n    let mobileCards = __jsx(Layout, null, __jsx(Row, {\n      style: {\n        marginTop: \"3rem\"\n      }\n    }, __jsx(Col, {\n      xs: 1,\n      style: {\n        marginTop: \"auto\",\n        marginBottom: \"auto\"\n      }\n    }), __jsx(Col, {\n      xs: 10,\n      className: \"container\"\n    }, __jsx(Row, null, cards.map((card, indx) => {\n      return __jsx(Col, {\n        key: indx,\n        sm: 4,\n        xs: 12\n      }, card);\n    }))), __jsx(Col, {\n      xs: 1,\n      style: {\n        marginTop: \"auto\",\n        marginBottom: \"auto\"\n      }\n    })));\n\n    let desktopCards = __jsx(Layout, null, __jsx(Row, {\n      style: {\n        marginTop: \"3rem\"\n      }\n    }, __jsx(Col, {\n      xs: 1,\n      style: {\n        marginTop: \"auto\",\n        marginBottom: \"auto\"\n      }\n    }, __jsx(Button, {\n      onClick: this.decreaseCardIndex,\n      variant: \"primary\",\n      disabled: !isLeftEnabled\n    }, __jsx(FontAwesomeIcon, {\n      icon: faArrowCircleLeft\n    }))), __jsx(Col, {\n      xs: 10,\n      className: \"container\"\n    }, __jsx(Row, null, cards.filter((card, index) => {\n      return index / 3 >= this.props.cardIndex - 1 && index / 3 < this.props.cardIndex;\n    }).map((card, indx) => {\n      return __jsx(Col, {\n        key: indx,\n        sm: 4,\n        xs: 12\n      }, card);\n    }))), __jsx(Col, {\n      xs: 1,\n      style: {\n        marginTop: \"auto\",\n        marginBottom: \"auto\"\n      }\n    }, __jsx(Button, {\n      onClick: this.increaseCardIndex,\n      variant: \"primary\",\n      disabled: !isRightEnabled\n    }, __jsx(FontAwesomeIcon, {\n      icon: faArrowCircleRight\n    })))));\n\n    return isMobile() ? mobileCards : desktopCards;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(\"index.js mapping state to props\");\n  console.log(state);\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    // userEidas: state.userEidas, // the eIDAS attributes of the user\n    // userEduGain: state.userEduGain, // the eduGain attributes of the user\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    cardIndex: state.cardIndex,\n    baseUrl: state.baseUrl\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    incCardIndex: () => {\n      dispatch(increaseCardIndex());\n    },\n    decCardIndex: () => {\n      dispatch(decreaseCardIndex());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}