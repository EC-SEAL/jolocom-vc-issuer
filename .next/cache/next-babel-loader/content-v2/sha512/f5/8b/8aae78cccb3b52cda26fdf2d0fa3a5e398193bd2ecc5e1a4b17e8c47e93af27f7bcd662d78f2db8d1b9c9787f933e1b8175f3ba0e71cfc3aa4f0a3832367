{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../components/Stepper\";\nimport HomeButton from \"../components/HomeButton\";\nimport IssueVCButton from \"../components/IssueVCButton\";\nimport PairOrCard from \"../components/PairOrCard\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueTaxisPI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n\n      if (req.session.did) {\n        reduxStore.dispatch(completeDIDAuth(req.query.uuid));\n      }\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.taxis) {\n      let toSelect = [this.props.sessionData.taxis];\n      this.props.setTaxistToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      this.props.makeConnectionRequest();\n    }\n  }\n\n  render() {\n    const hasRequiredAttributes = this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.taxis !== undefined;\n    let keycloakEidasPath = `${this.props.baseUrl}eidas/eidas-authenticate-secure?uuid=${this.props.uuid}`;\n    let taxisLoginButton = !hasRequiredAttributes ? __jsx(\"a\", {\n      className: \"btn btn-primary\",\n      href: keycloakEidasPath,\n      role: \"button\"\n    }, \"TAXIS\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"TAXIS\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: hasRequiredAttributes,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.uuid,\n      vcType: \"TAXIS-PI\"\n    });\n\n    let taxisCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an Personal Information Verifiable Credential from TAXIS\"), __jsx(Card.Body, null, __jsx(Card.Title, null, hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, taxisLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let stepNumber = !this.props.DID ? 0 : hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"TAXIS\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: taxisCard,\n      vcSent: this.props.vcSent\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setTaxistToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    //makeOnlyConnectionRequest\n    makeConnectionRequest: () => {\n      dispatch(makeOnlyConnectionRequest());\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueTaxisPI);","map":null,"metadata":{},"sourceType":"module"}