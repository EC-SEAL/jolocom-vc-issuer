{"ast":null,"code":"import _regeneratorRuntime from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEdugainUriPort, setEdugainRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nvar IssueEdugain = /*#__PURE__*/function (_React$Component) {\n  _inherits(IssueEdugain, _React$Component);\n\n  var _super = _createSuper(IssueEdugain);\n\n  function IssueEdugain(props) {\n    var _this;\n\n    _classCallCheck(this, IssueEdugain);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData;\n    _this.proceedWithAuthentication = _this.proceedWithAuthentication.bind(_assertThisInitialized(_this));\n    _this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.edugain !== undefined;\n    return _this;\n  }\n\n  _createClass(IssueEdugain, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"edugain.js:: componentDIDMount\");\n\n      if (this.props.sessionData && this.props.sessionData.edugain) {\n        console.log(\"edugain.js :: the data is \".concat(this.props.sessionData.edugain));\n        var toSelect = [this.props.sessionData.edugain];\n        this.props.setEdugainToSelection(toSelect);\n      }\n\n      if (!this.props.DID) {\n        //if DID auth has not been completed\n        // console.log(`${new Date()} DID not found`);\n        if (!this.props.sealSession) {\n          // console.log(\"startSealSessionAndDidAuth\")\n          console.log(\"isMobile \".concat(isMobile()));\n          this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"edugain\", isMobile()); //and then makeConnectionRequest\n        } else {\n          // console.log(\"makeConnectionRequest\")\n          console.log(\"isMobile \".concat(isMobile()));\n          this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"edugain\", isMobile());\n        }\n      }\n\n      axios.get(\"\".concat(this.props.baseUrl, \"/vc/make-edugain-callback-token?sessionId=\").concat(this.props.sealSession)).then(function (data) {\n        axios.post(\"\".concat(_this2.props.baseUrl, \"seal/update-session\"), {\n          sessionId: _this2.props.sealSession,\n          variableName: \"ClientCallbackAddr\",\n          variableValue: \"\".concat(_this2.props.edugainRedirectUri, \"?msToken=\").concat(data.data.additionalData)\n        }).then(function (data) {\n          //the edugain ms expects an empty datastore object to exist in session\n          axios.post(\"\".concat(_this2.props.baseUrl, \"seal/update-session\"), {\n            sessionId: _this2.props.sealSession,\n            variableName: \"dataStore\",\n            variableValue: JSON.stringify({})\n          }).then(function (data) {\n            console.log(\"edugain.js:: session updated\");\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      console.log(\"edugain.js:: componentDidUpdate \".concat(this.hasRequiredAttributes));\n\n      if (this.props.DID & !this.hasRequiredAttributes) {\n        //if DID auth is completed\n        // register the callbackUri to the SessionManager\n        axios.get(\"\".concat(this.props.baseUrl, \"/vc/make-edugain-callback-token?sessionId=\").concat(this.props.sealSession)).then(function (data) {\n          axios.post(\"\".concat(_this3.props.baseUrl, \"seal/update-session\"), {\n            sessionId: _this3.props.sealSession,\n            variableName: \"ClientCallbackAddr\",\n            variableValue: \"\".concat(_this3.props.edugainRedirectUri, \"?msToken=\").concat(data.data.additionalData)\n          }).then(function (data) {\n            //the edugain ms expects an empty datastore object to exist in session\n            axios.post(\"\".concat(_this3.props.baseUrl, \"seal/update-session\"), {\n              sessionId: _this3.props.sealSession,\n              variableName: \"dataStore\",\n              variableValue: JSON.stringify({})\n            }).then(function (data) {\n              console.log(\"edugain.js:: session updated\");\n            });\n          });\n        });\n      }\n    }\n  }, {\n    key: \"proceedWithAuthentication\",\n    value: function proceedWithAuthentication() {\n      var _this4 = this;\n\n      axios.get(\"\".concat(this.props.baseUrl, \"/vc/make-edugain-token?sessionId=\").concat(this.props.sealSession)).then(function (data) {\n        // console.log(`the data is::`);\n        // console.log(data);\n        var theUrl = _this4.props.edugainUri.indexOf(\"https\" >= 0) ? _this4.props.edugainUri : \"http://\".concat(_this4.props.edugainUri);\n        window.location.href = \"\".concat(theUrl, \":\").concat(_this4.props.edugainPort, \"/is/query?msToken=\").concat(data.data.additionalData);\n        return null;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n      var stepperSteps = [{\n        title: \"Pair your wallet\"\n      }, {\n        title: 'Authenticate over \"eduGAIN\"'\n      }, {\n        title: \"Request Issuance\"\n      }];\n\n      if (this.props.qrData && isMobile() && !this.props.DID) {\n        return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n          steps: stepperSteps,\n          activeNum: stepNumber\n        }))), __jsx(ConnectMobile, {\n          baseUrl: this.props.baseUrl,\n          qrData: this.props.qrData,\n          DID: this.props.DID,\n          uuid: this.props.uuid,\n          serverSessionId: this.props.serverSessionId,\n          sealSession: this.props.sealSession\n        }));\n      }\n\n      var edugainLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n        onClick: this.proceedWithAuthentication\n      }, \"eduGAIN\") : __jsx(Button, {\n        variant: \"primary\",\n        disabled: true\n      }, \"eduGAIN\");\n\n      var issueVCBut = __jsx(IssueVCButton, {\n        hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n        ,\n        baseUrl: this.props.baseUrl,\n        userSelection: this.props.userSelection,\n        uuid: this.props.sealSession,\n        vcType: \"SEAL-EDUGAIN\"\n      });\n\n      var edugainCard = __jsx(Card, {\n        className: \"text-center\",\n        style: {\n          marginTop: \"2rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue an EDUGAIN based Verifiable Credential\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, edugainLoginButton), __jsx(Col, null, issueVCBut)))));\n\n      var result = __jsx(PairOrCard, {\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        baseUrl: this.props.baseUrl,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        card: edugainCard,\n        vcSent: this.props.vcSent,\n        sealSession: this.props.sealSession\n      });\n\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), result, __jsx(Row, null, __jsx(HomeButton, {\n        baseUrl: this.props.baseUrl\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var reduxStore, req, userSessionData, DIDOk, sealSession, baseUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reduxStore = _ref.reduxStore, req = _ref.req;\n\n                if (false) {\n                  userSessionData = req.session.userData;\n                  reduxStore.dispatch(setEndpoint(req.session.enpoint));\n                  baseUrl = req.session.baseUrl ? \"/\".concat(req.session.baseUrl, \"/\") : \"\";\n                  reduxStore.dispatch(setBaseUrl(baseUrl));\n                  reduxStore.dispatch(setServerSessionId(req.session.id));\n                  DIDOk = req.session.DID;\n                  sealSession = req.session.sealSession;\n                  console.log(\"edugainjs:: in the server the seal session is:: \".concat(req.session.sealSession));\n                  reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n                  reduxStore.dispatch(setEdugainRedirectUri(req.edugainRedirectUri));\n                } else {\n                  if (reduxStore.getState().sessionData) {\n                    userSessionData = reduxStore.getState().sessionData;\n                    DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n                    sealSession = reduxStore.getState().sealSession;\n                  } else {\n                    console.log(\"no server session data found\");\n                  }\n                } //this way the userSessionData gets set in all settings\n\n\n                if (userSessionData) {\n                  console.log(\"edugain.js:: will setSessionData\");\n                  console.log(userSessionData);\n                  reduxStore.dispatch(setSessionData(userSessionData));\n                }\n\n                if (DIDOk) {\n                  console.log(\"edugain.js:: will set completeDIDAuth\");\n                  reduxStore.dispatch(completeDIDAuth(sealSession));\n                }\n\n                if (sealSession) {\n                  console.log(\"edugain.js:: will set sealSession\");\n                  console.log(sealSession);\n                  reduxStore.dispatch(setSealSession(sealSession));\n                } //returned value here is getting mered with the mapstatetoprops\n                // mapstatetoprops overrides these values if they match\n\n\n                return _context.abrupt(\"return\", {\n                  sessionData: userSessionData,\n                  qrData: reduxStore.getState().qrData,\n                  vcSent: false,\n                  sealSession: reduxStore.getState().sealSession\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IssueEdugain;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    edugainUri: state.edugainUri,\n    edugainPort: state.edugainPort,\n    endpoint: state.endpoint,\n    edugainRedirectUri: state.edugainRedirectUri\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setEdugainToSelection: function setEdugainToSelection(set) {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: function setSteps(steps) {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: function setEndPoint(endpont) {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: function makeConnectionRequest(sealSession, baseUrl, vcType, isMobile) {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: function didAuthOK(uuid) {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: function startSealSession(baseUrl) {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: function startSealSessionAndDidAuth(baseUrl, vcType, isMobile) {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: function setTheSealSession(sessionId) {\n      dispatch(setSealSession(sessionId));\n    },\n    setEdugain: function setEdugain(uri, data) {\n      dispatch(setEdugainUriPort(uri, data));\n    },\n    setEdugainRedirect: function setEdugainRedirect(uri) {\n      dispatch(setEdugainRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueEdugain);","map":null,"metadata":{},"sourceType":"module"}