{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { setSessionData, addToSelection, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport { connect } from \"react-redux\";\nimport Link from \"next/link\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../components/Stepper\";\n\nconst uuidv1 = require(\"uuid/v1\");\n\nclass IssueEidas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData\n    };\n  }\n\n  componentDidMount() {\n    this.props.setSteps([{\n      title: 'Authenticate over \"eIDAS-eID\"'\n    }, {\n      title: 'Authenticate over \"Academic Id\"'\n    }, {\n      title: \"Request Issuance\"\n    }, {\n      title: \"Accept Verifiable Credential\"\n    }]);\n\n    if (this.props.sessionData && this.props.sessionData.eidas && this.props.sessionData.fullAcademicId) {\n      let toSelect = [this.props.sessionData.eidas, this.props.sessionData.fullAcademicId];\n      this.props.setSetsToSelection(toSelect);\n    }\n  }\n\n  render() {\n    const hasEidasRequiredAttr = this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.eidas !== undefined;\n    let eIDASLoginButton = !hasEidasRequiredAttr ? __jsx(\"a\", {\n      className: \"btn btn-primary\",\n      href: \"/test/academicId-eidas-authenticate\",\n      role: \"button\"\n    }, \"eIDAS\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true,\n      style: {\n        backgroundColor: \"#00c642\"\n      }\n    }, \"eIDAS\");\n    const hasAcademicIdRequiredAttr = this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.academicId !== undefined;\n    let token = uuidv1();\n    let academicIdButton = !hasAcademicIdRequiredAttr && hasEidasRequiredAttr ? __jsx(\"a\", {\n      className: \"btn btn-primary\",\n      href: `/academic-id-check/query?sessionId=full-${token}`,\n      role: \"button\"\n    }, \"AcademicId\") : hasAcademicIdRequiredAttr ? __jsx(Button, {\n      variant: \"primary\",\n      disabled: true,\n      style: {\n        backgroundColor: \"#00c642\"\n      }\n    }, \"AcademicId\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"AcademicId\");\n    let vcIssuanceLink = \"/issue/SEAL-ACADEMICID\";\n    let vcIssuanceHref = \"/issue/[vcType]\"; // console.log(\n    //   `issue-gr-academic-id.js - render:: vcIssanceLink ${vcIssuanceLink}`\n    // );\n\n    let credentialCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Verifiable Credential linking your eIDAS eID with your Greek Academic Attributes\"), __jsx(Card.Body, null, __jsx(Card.Title, null, hasEidasRequiredAttr && hasAcademicIdRequiredAttr ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, academicIdButton), __jsx(Col, null, __jsx(Link, {\n      as: vcIssuanceLink,\n      href: vcIssuanceHref\n    }, __jsx(Button, {\n      variant: \"primary\",\n      disabled: !(hasAcademicIdRequiredAttr && hasEidasRequiredAttr)\n    }, \"Issue Verifiable Claim\")))))));\n\n    let stepNumber = 0;\n\n    if (hasEidasRequiredAttr) {\n      if (!hasAcademicIdRequiredAttr) {\n        stepNumber = 1;\n      } else {\n        stepNumber = 2;\n      }\n    } //icon:'/eduGAIN-icon.png'\n\n\n    let stepperSteps = [{\n      title: 'Authenticate over \"eIDAS-eID\"'\n    }, {\n      title: 'Authenticate over \"GR-AcademicId\"'\n    }, {\n      title: \"Request Issuance\"\n    }, {\n      title: \"Accept Verifiable Credential\"\n    }];\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber,\n      completeTitleColor: \"#00c642\" // completeColor={\"#00c642\"}\n\n    }))), credentialCard, __jsx(Row, null, __jsx(\"div\", {\n      className: \"col\",\n      style: {\n        marginTop: \"1.5rem\"\n      }\n    }, __jsx(Link, {\n      href: this.props.baseUrl ? `${this.props.baseUrl}` : \"/\"\n    }, __jsx(Button, {\n      variant: \"primary\",\n      className: \"float-right\"\n    }, \"Home\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC\n    baseUrl: state.baseUrl\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSetsToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueEidas);","map":null,"metadata":{},"sourceType":"module"}