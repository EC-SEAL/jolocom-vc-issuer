{"ast":null,"code":"import _regeneratorRuntime from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { connect } from \"react-redux\"; // get our fontawesome imports\n\nimport { faArrowCircleRight, faArrowCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { loginClicked, setUserAttributeSelection, setSessionData, setServerSessionId, setEndpoint, increaseCardIndex, decreaseCardIndex, setBaseUrl } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\n\nvar jwt = require(\"jsonwebtoken\");\n\nimport { getPath } from \"../helpers/pathHelper\";\nimport isMobile from \"../helpers/isMobile\";\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.clickMe = _this.clickMe.bind(_assertThisInitialized(_this));\n    _this.increaseCardIndex = _this.increaseCardIndex.bind(_assertThisInitialized(_this));\n    _this.decreaseCardIndex = _this.decreaseCardIndex.bind(_assertThisInitialized(_this));\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData; // this.userEidas = props.userEidas;\n    // this.userEduGain = props.userEduGain;\n\n    _this.userSelection = props.userSelection;\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          sessionData = _this$props.sessionData;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"clickMe\",\n    value: function clickMe() {\n      this.dispatch(loginClicked());\n    }\n  }, {\n    key: \"increaseCardIndex\",\n    value: function increaseCardIndex() {\n      this.props.incCardIndex();\n    }\n  }, {\n    key: \"decreaseCardIndex\",\n    value: function decreaseCardIndex() {\n      this.props.decCardIndex();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cards = [__jsx(Card, {\n        style: {\n          minHeight: \"47rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue an isStudent Verifiable Credential\"), __jsx(Card.Img, {\n        variant: \"top\",\n        src: getPath(\"student.png\")\n      }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate VC proving that your are a Student\"), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"You will be issued a Verifiable Credential (VC) proving that you are a student. To do so you will need to authenticate over eIDAS and through an Academic Attribute Provider. \", __jsx(\"br\", null), \"SEAL link those attributes together.\"), __jsx(Card.Link, {\n        href: \"#\"\n      }, __jsx(Link, {\n        as: getPath(\"issue-is-student\"),\n        href: \"issue-is-student\"\n      }, __jsx(Button, {\n        variant: \"primary\"\n      }, \"Next\"))))), __jsx(Card, {\n        style: {\n          minHeight: \"47rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue an eIDAS eID Verifiable Credential\"), __jsx(Card.Img, {\n        style: {\n          minHeight: \"18rem\"\n        },\n        variant: \"top\",\n        src: getPath(\"eID.png\")\n      }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate an eIDAS eID Verifiable Credential\"), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"You will be required to authenticate over eIDAS in order to import your Personal Identnification information. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential based on your national eID.\"), __jsx(Card.Link, {\n        href: \"#\"\n      }, __jsx(Link // as={getPath(\"issue-eidas\")}\n      , {\n        href: \"\".concat(this.props.baseUrl, \"vc/issue/eidas\")\n      }, __jsx(Button, {\n        variant: \"primary\"\n      }, \"Next\"))))), __jsx(Card, {\n        style: {\n          minHeight: \"47rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue GR Ministry of Education based Verifiable Credential\"), __jsx(Card.Img, {\n        style: {\n          minHeight: \"18rem\"\n        },\n        variant: \"top\",\n        src: getPath(\"minedu.jpg\")\n      }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate a Verifiable Credential GR MinEdu AcademicId.\"), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Available for Greek Students and Academic Staff only\"), __jsx(Card.Text, null, \"You will be required to authenticate using your University's Infrastructure. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential your Academic Attributes.\"), __jsx(Card.Link, {\n        href: \"#\"\n      }, __jsx(Link, {\n        href: \"\".concat(this.props.baseUrl, \"issue-gr-academic-id\")\n      }, __jsx(Button, {\n        variant: \"primary\"\n      }, \"Next\"))))), __jsx(Card, {\n        style: {\n          minHeight: \"47rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue an eduGAIN Verifiable Credential\"), __jsx(Card.Img, {\n        style: {\n          minHeight: \"18rem\"\n        },\n        variant: \"top\",\n        src: getPath(\"edugain.png\")\n      }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next to generate an eduGAIN eID Verifiable Credential\"), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Available for all Students with Universities part of the eduGAIN Federation\"), __jsx(Card.Text, null, \"You will be required to authenticate using your University's Infrastructure. \", __jsx(\"br\", null), \"SEAL will issue a Verifiable Credential your Academic Attributes.\"), __jsx(Card.Link, {\n        href: \"#\"\n      }, \"Next\"))), __jsx(Card, {\n        style: {\n          minHeight: \"47rem\"\n        }\n      }, __jsx(Card.Header, null, \"Build Your Own Verifiable Credential\"), __jsx(Card.Img, {\n        style: {\n          minHeight: \"18rem\"\n        },\n        variant: \"top\",\n        src: getPath(\"puzzle.png\")\n      }), __jsx(Card.Body, null, __jsx(Card.Title, null, \"Click Next select which attributes to include in a Credential.\"), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Available for all EU citizens\"), __jsx(Card.Text, null, \"Connect with any of the available data sources, and then select which attributes to include in a new Verifiable Credential.\"), __jsx(Card.Link, null, __jsx(Link, {\n        as: getPath(\"attribute-selector\"),\n        href: \"attribute-selector\"\n      }, __jsx(Button, {\n        variant: \"primary\"\n      }, \"Next\")))))];\n      var isRightEnabled = cards.length / 3 > this.props.cardIndex;\n      var isLeftEnabled = this.props.cardIndex > 1;\n\n      var mobileCards = __jsx(Layout, null, __jsx(Row, {\n        style: {\n          marginTop: \"3rem\"\n        }\n      }, __jsx(Col, {\n        xs: 1,\n        style: {\n          marginTop: \"auto\",\n          marginBottom: \"auto\"\n        }\n      }), __jsx(Col, {\n        xs: 10,\n        className: \"container\"\n      }, __jsx(Row, null, cards.map(function (card, indx) {\n        return __jsx(Col, {\n          key: indx,\n          sm: 4,\n          xs: 12\n        }, card);\n      }))), __jsx(Col, {\n        xs: 1,\n        style: {\n          marginTop: \"auto\",\n          marginBottom: \"auto\"\n        }\n      })));\n\n      var desktopCards = __jsx(Layout, null, __jsx(Row, {\n        style: {\n          marginTop: \"3rem\"\n        }\n      }, __jsx(Col, {\n        xs: 1,\n        style: {\n          marginTop: \"auto\",\n          marginBottom: \"auto\"\n        }\n      }, __jsx(Button, {\n        onClick: this.decreaseCardIndex,\n        variant: \"primary\",\n        disabled: !isLeftEnabled\n      }, __jsx(FontAwesomeIcon, {\n        icon: faArrowCircleLeft\n      }))), __jsx(Col, {\n        xs: 10,\n        className: \"container\"\n      }, __jsx(Row, null, cards.filter(function (card, index) {\n        return index / 3 >= _this2.props.cardIndex - 1 && index / 3 < _this2.props.cardIndex;\n      }).map(function (card, indx) {\n        return __jsx(Col, {\n          key: indx,\n          sm: 4,\n          xs: 12\n        }, card);\n      }))), __jsx(Col, {\n        xs: 1,\n        style: {\n          marginTop: \"auto\",\n          marginBottom: \"auto\"\n        }\n      }, __jsx(Button, {\n        onClick: this.increaseCardIndex,\n        variant: \"primary\",\n        disabled: !isRightEnabled\n      }, __jsx(FontAwesomeIcon, {\n        icon: faArrowCircleRight\n      })))));\n\n      return isMobile() ? mobileCards : desktopCards;\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var reduxStore, req, serverIsFetching, userSessionData, serverSessionId, endpoint, baseUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reduxStore = _ref.reduxStore, req = _ref.req;\n                serverIsFetching = reduxStore.getState().fetching; // console.log(`serverIsFetching ${serverIsFetching}`);\n\n                if (false) {\n                  userSessionData = req.session.userData; // the user attributes\n\n                  serverSessionId = req.session.id; // the sessionId that exists on the backend server\n                  // this is stored on the redux store to use it on the client side components\n\n                  endpoint = req.session.endpoint;\n                  reduxStore.dispatch(setServerSessionId(serverSessionId));\n                  reduxStore.dispatch(setEndpoint(endpoint));\n                  baseUrl = req.session.baseUrl ? \"/\".concat(req.session.baseUrl, \"/\") : \"\"; // console.log(`index.js setting baseurl to: ${baseUrl}`);\n\n                  reduxStore.dispatch(setBaseUrl(baseUrl));\n                } else {\n                  if (reduxStore.getState().sessionData) {\n                    // console.log(`user data is defined already ${sessionData}`);\n                    userSessionData = reduxStore.getState().sessionData;\n                  } else {\n                    console.log(\"no server session data found\");\n                  }\n                }\n\n                reduxStore.dispatch(setSessionData(userSessionData)); //add the userEidas data to the reduxstore to be able to get it from other componets as well\n\n                reduxStore.dispatch(setUserAttributeSelection([])); //returned value here is getting mered with the mapstatetoprops\n                // mapstatetoprops overrides these values if they match\n\n                return _context.abrupt(\"return\", {\n                  isFetching: serverIsFetching,\n                  sessionData: userSessionData,\n                  userSelection: userSessionData ? userSessionData.userSelection : null,\n                  qrData: reduxStore.getState().qrData,\n                  baseurl: reduxStore.getState().baseUrl,\n                  serverSessionId: reduxStore.getState().serverSessionId\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Index;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  console.log(\"index.js mapping state to props\");\n  console.log(state);\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    // userEidas: state.userEidas, // the eIDAS attributes of the user\n    // userEduGain: state.userEduGain, // the eduGain attributes of the user\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    cardIndex: state.cardIndex,\n    baseUrl: state.baseUrl\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    incCardIndex: function incCardIndex() {\n      dispatch(increaseCardIndex());\n    },\n    decCardIndex: function decCardIndex() {\n      dispatch(decreaseCardIndex());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}