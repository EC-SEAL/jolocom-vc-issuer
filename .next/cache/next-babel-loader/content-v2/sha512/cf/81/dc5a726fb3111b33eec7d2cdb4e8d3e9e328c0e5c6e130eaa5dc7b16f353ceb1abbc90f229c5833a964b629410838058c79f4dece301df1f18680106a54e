{"ast":null,"code":"import _classCallCheck from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ni/code/js/seal-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\nimport Layout from \"../../components/Layout\";\nimport QrPrompt from \"../../components/QrPrompt\";\nimport MyStepper from \"../../components/Stepper\";\nimport SSE from \"../../components/Sse\";\n\nvar message = require(\"uport-transports\").message.util;\n\nvar transport = require(\"uport-transports\").transport;\n\nimport { requestVCgeneration } from \"../../store\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport isMobile from \"../../helpers/isMobile\";\nimport Router from \"next/router\";\n\nvar Issue = /*#__PURE__*/function (_React$Component) {\n  _inherits(Issue, _React$Component);\n\n  var _super = _createSuper(Issue);\n\n  function Issue(props) {\n    var _this;\n\n    _classCallCheck(this, Issue);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData;\n    _this.userSelection = props.userSelection;\n    _this.endpoint = props.endpoint;\n    _this.requestVC = _this.requestVC.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Issue, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.userSelection.length > 0) {\n        this.requestVC();\n      }\n    }\n  }, {\n    key: \"requestVC\",\n    value: function requestVC() {\n      var vcType = this.props.router.query.vcType;\n      console.log(\"will request the creation of a requestVC\");\n      console.log(\"[vcType.js] :: the pathi is \".concat(vcType));\n      var url = this.props.baseUrl ? \"\".concat(this.props.baseUrl, \"issueVCReq\") : \"/issueVCReq\";\n      this.props.makeIssueRequest(url, this.props.userSelection, vcType, isMobile());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var result;\n\n      if (this.props.userSelection.length > 0) {\n        if (this.props.vcSent) {\n          result = __jsx(\"div\", {\n            className: \"row\"\n          }, __jsx(\"div\", {\n            className: \"col\",\n            style: {\n              marginTop: \"3rem\",\n              marginBottom: \"3rem\",\n              textAlign: \"center\"\n            }\n          }, __jsx(\"img\", {\n            alt: \"\",\n            src: \"/finished.png\",\n            style: {\n              maxWidth: \"15rem\",\n              display: \"block\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\"\n            }\n          }), __jsx(\"p\", null, \"The verifiable credential has been sent to your mobile phone succesfully!!\", __jsx(\"br\", null), \"You should receive a notification, prompting you to store it, very soon!\")));\n        }\n\n        if (this.props.qrData && isMobile()) {\n          var urlTransport = transport.url.send();\n          urlTransport(this.props.qrData); //TODO maybe add a check here with SSE if the\n          // user received the VC?\n\n          Router.push(\"\".concat(this.props.baseUrl));\n        }\n\n        if (this.props.qrData && !this.props.vcSent) {\n          var sseEndpoint = this.props.baseUrl ? \"\".concat(this.props.endpoint, \"/\").concat(this.props.baseUrl) : this.props.endpoint;\n          result = __jsx(\"div\", null, __jsx(QrPrompt, {\n            qrData: this.props.qrData,\n            message: \"SEAL is requesting to connect your uPort wallet:\",\n            permissions: [\"Push Notifications\"],\n            baseUrl: this.props.baseUrl\n          }), __jsx(SSE, {\n            uuid: this.props.uuid,\n            endpoint: sseEndpoint\n          }));\n        }\n\n        if (this.props.isFetching && !this.props.qrData && !this.props.vcSent) {\n          result = __jsx(\"div\", {\n            className: \"row\"\n          }, \"Generating QR code please wait\");\n        }\n\n        return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n          steps: this.props.stepperSteps,\n          activeNum: this.props.stepperSteps.length - 1\n        }))), result, __jsx(Row, null, __jsx(\"div\", {\n          className: \"col\",\n          style: {\n            marginTop: \"1.5rem\"\n          }\n        }, __jsx(Link, {\n          href: this.props.baseUrl ? \"\".concat(this.props.baseUrl) : \"/\"\n        }, __jsx(Button, {\n          variant: \"primary\",\n          className: \"float-right\"\n        }, \"Home\")))));\n      } else {\n        return __jsx(Layout, null, __jsx(\"div\", {\n          className: \"row\"\n        }, \"user made no selections!\"));\n      }\n    }\n  }]);\n\n  return Issue;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  console.log(\"issue.js:: mapping state to props\");\n  console.log(state);\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    uuid: state.uuid,\n    // userEidas: state.userEidas, // the eIDAS attributes of the user\n    // userEduGain: state.userEduGain, // the eduGain attributes of the user\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    vcSent: state.vcSent,\n    stepperSteps: state.stepperSteps,\n    endpoint: state.endpoint,\n    baseUrl: state.baseUrl\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    makeIssueRequest: function makeIssueRequest(url, data, vcType) {\n      var isMobile = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      dispatch(requestVCgeneration(url, data, vcType, isMobile));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Issue));","map":null,"metadata":{},"sourceType":"module"}