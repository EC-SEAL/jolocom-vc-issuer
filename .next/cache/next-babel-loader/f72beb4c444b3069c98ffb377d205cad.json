{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`); //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\"event\", evt => {\n      const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n      // Use data here\n\n      let eventData = JSON.parse(data);\n      console.log(\"SSE.js eventData:\");\n      console.log(eventData);\n\n      if (eventData.sessionId && this.props.serverSessionId) {\n        console.log(`SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`);\n\n        if (eventData.sessionId === this.props.serverSessionId) {\n          console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n          console.log(`SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`);\n          this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n        }\n      } // if there is no current session in the client\n      // and the server sends a new session event\n\n\n      if (!this.props.uuid) {\n        console.log(\" no active session found!\");\n      } else {\n        console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n        console.log(`SSE.js:: sent status ${eventData.status}`); //check if event is about this client\n\n        if (this.props.uuid === eventData.uuid) {\n          switch (eventData.status) {\n            case \"sent\":\n              console.log(\"SSE.js:: VC sent to user\");\n              this.props.vcSent();\n              return \"\";\n\n            default:\n              console.log(\"SSE.js:: default\");\n          }\n        } else {\n          console.log(`SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`);\n        }\n      }\n    }, false);\n  }\n\n  render() {\n    return __jsx(\"div\", null);\n  } //..render...\n\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);","map":{"version":3,"names":["React","connect","vcSentToUser","completeDIDAuth","SSE","Component","constructor","props","dispatch","session","componentDidMount","eventSource","EventSource","addEventListener","evt","data","JSON","parse","eventData","console","log","sessionId","serverSessionId","uuid","didAuthOK","sealSession","status","vcSent","render","mapStateToProps","state","serverSession","sessionStatus","mapDispatchToProps"],"sources":["/home/ni/code/js/jolocom-seal-issuer/components/Sse.js"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`);\n    //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\n      \"event\",\n      evt => {\n        const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n        // Use data here\n        let eventData = JSON.parse(data);\n        console.log(\"SSE.js eventData:\")\n        console.log(eventData);\n\n        if (eventData.sessionId && this.props.serverSessionId) {\n          console.log(\n            `SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`\n          );\n          if (eventData.sessionId === this.props.serverSessionId) {\n            console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n            console.log(\n              `SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`\n            );\n            this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n          }\n        }\n\n        // if there is no current session in the client\n        // and the server sends a new session event\n        if (!this.props.uuid) {\n          console.log(\" no active session found!\");\n        } else {\n          console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n          console.log(`SSE.js:: sent status ${eventData.status}`);\n          //check if event is about this client\n          if (this.props.uuid === eventData.uuid) {\n            switch (eventData.status) {\n              case \"sent\":\n                console.log(\"SSE.js:: VC sent to user\");\n                this.props.vcSent();\n                return \"\";\n              default:\n                console.log(\"SSE.js:: default\");\n            }\n          } else {\n            console.log(\n              `SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`\n            );\n          }\n        }\n      },\n      false\n    );\n  }\n\n  render() {\n    return <div></div>;\n  }\n\n  //..render...\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus\n    // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}