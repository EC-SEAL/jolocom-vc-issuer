{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri, setEdugainUriPort } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.proceedWithEdugainAuth = this.proceedWithEdugainAuth.bind(this);\n    this.proceedWithLocalLDAP = this.proceedWithLocalLDAP.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && (props.sessionData.eidas !== undefined || props.sessionData.edugain !== undefined);\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`eidas.js:: in the server the seal session is:: ${req.session.sealSession}`);\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n      reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      errorUser: req.session.error,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (this.props.sessionData && this.props.sessionData.edugain) {\n      let toSelect = [this.props.sessionData.edugain];\n      this.props.setEdugainToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"eidas\", isMobile()); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"eidas\", isMobile());\n      }\n    } // let updateUrl = this.props.baseUrl !== \"\"?`${this.props.baseUrl}seal/update-session`:`/seal/update-session`\n    // console.log(updateUrl)\n\n\n    let updateUrl = this.props.baseUrl !== \"\" ? `${this.props.baseUrl}seal/update-session` : `/seal/update-session`; // console.log(\"!!!!!!!!!!!!!!!!1\");\n    // console.log(updateUrl);\n\n    axios.post(updateUrl, {\n      sessionId: this.props.sealSession,\n      variableName: \"ClientCallbackAddr\",\n      variableValue: this.props.eidasRedirectUri\n    }).then(data => {\n      console.log(data);\n      console.log(`isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`);\n    });\n  }\n\n  componentDidUpdate() {// let updateUrl = this.props.baseUrl !== \"\"?`${this.props.baseUrl}seal/update-session`:`/seal/update-session`\n    // axios\n    //   .post(updateUrl, {\n    //     sessionId: this.props.sealSession,\n    //     variableName: \"ClientCallbackAddr\",\n    //     variableValue: this.props.eidasRedirectUri,\n    //   })\n    //   .then((data) => {\n    //     console.log(data)\n    //     console.log(`isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`);\n    //   });\n  }\n\n  proceedWithEidasAuth() {\n    let updateUrl = this.props.baseUrl !== \"\" ? `${this.props.baseUrl}seal/update-session` : `/seal/update-session`;\n    axios.post(updateUrl, {\n      sessionId: this.props.sealSession,\n      variableName: \"ClientCallbackAddr\",\n      variableValue: this.props.eidasRedirectUri\n    }).then(data => {\n      console.log(data);\n      console.log(`isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`);\n      axios.get(`${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`).then(data => {\n        console.log(`the data is::`);\n        console.log(data);\n        window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n    });\n  }\n\n  async proceedWithEdugainAuth() {\n    // register the callbackUri to the SessionManager\n    let makeEdugainCallbackToken = await axios.get(`${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`);\n    await axios.post(`${this.props.baseUrl}seal/update-session`, {\n      sessionId: this.props.sealSession,\n      variableName: \"ClientCallbackAddr\",\n      variableValue: `${this.props.eidasRedirectUri}?msToken=${makeEdugainCallbackToken.data.additionalData}`\n    });\n    await axios.post(`${this.props.baseUrl}seal/update-session`, {\n      sessionId: this.props.sealSession,\n      variableName: \"dataStore\",\n      variableValue: JSON.stringify({})\n    });\n    console.log(\"edugain.js:: session updated\");\n    axios.get(`${this.props.baseUrl}/vc/make-edugain-token?sessionId=${this.props.sealSession}`).then(data => {\n      // console.log(`the data is::`);\n      // console.log(data);\n      let theUrl = this.props.edugainUri.indexOf(\"https\" >= 0) ? this.props.edugainUri : `http://${this.props.edugainUri}`;\n      window.location.href = `${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  async proceedWithLocalLDAP() {\n    let sessionFrag = this.props.sealSession ? `?session=${this.props.sealSession}` : \"\";\n    window.location.href = this.props.baseUrl ? `${this.props.baseUrl}uaegean-seal-usability/authenticate${sessionFrag}` : `${this.props.baseUrl}/uaegean-seal-usability/authenticate${sessionFrag}`;\n  }\n\n  render() {\n    let stepNumber = this.props.vcSent ? 3 : !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"eIDAS eID, eduGAIN, or email\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sealSession\n      }));\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col text-center\"\n    }, __jsx(Button, {\n      onClick: this.proceedWithEidasAuth,\n      style: {\n        width: \"12rem\",\n        marginBottom: \"0.7rem\"\n      }\n    }, \"eIDAS eID\")), __jsx(\"div\", {\n      className: \"col text-center\"\n    }, __jsx(Button, {\n      onClick: this.proceedWithEdugainAuth,\n      style: {\n        width: \"12rem\",\n        marginBottom: \"0.7rem\"\n      }\n    }, \"eduGAIN\"))), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col text-center\"\n    }, __jsx(Button, {\n      onClick: this.proceedWithLocalLDAP,\n      style: {\n        width: \"12rem\",\n        marginBottom: \"0.7rem\"\n      }\n    }, \"Login with your email\")))) : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"Authenticate\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"SEAL-isErasmusAegean\"\n    });\n\n    let eidasCard = this.props.errorUser ? __jsx(\"div\", null, \" \", __jsx(\"p\", null, \"Your are not registerd as a University of the Aegean Erasmus Student\"), \" \", __jsx(\"div\", null, \"Reason: \", this.props.errorUser)) : __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a myIDs Card, proving your affiliation with UAegean\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to one of the following data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through one of the required data sources (i.e. eIDAS eID or eduGAIN or via e-mail), click the \\\"Issue\\\" button to generate and receive your identity card.\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: eidasCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      credQROffer: this.props.credQROffer\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer,\n    edugainUri: state.edugainUri,\n    edugainPort: state.edugainPort,\n    edugainRedirectUri: state.edugainRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEidasToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setEdugainToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n    setEdugain: (uri, data) => {\n      dispatch(setEdugainUriPort(uri, data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);","map":{"version":3,"sources":["/home/ni/code/js/jolocom-seal-issuer/pages/vc/issue/isErasmusAegean.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","makeSealSession","makeSealSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","setEdugainUriPort","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","ConnectMobile","isMobile","IssueIsErasmusAegean","Component","constructor","props","dispatch","isFetching","sessionData","proceedWithEidasAuth","bind","proceedWithEdugainAuth","proceedWithLocalLDAP","hasRequiredAttributes","undefined","eidas","edugain","getInitialProps","reduxStore","req","userSessionData","DIDOk","sealSession","session","userData","enpoint","baseUrl","id","DID","console","log","eidasUri","eidasPort","eidasRedirectUri","edugainUri","edugainPort","getState","errorUser","error","qrData","vcSent","componentDidMount","toSelect","setEidasToSelection","setEdugainToSelection","startSealSessionAndDidAuth","makeConnectionRequest","updateUrl","post","sessionId","variableName","variableValue","then","data","componentDidUpdate","get","window","location","href","additionalData","makeEdugainCallbackToken","JSON","stringify","theUrl","indexOf","sessionFrag","render","stepNumber","stepperSteps","title","uuid","serverSessionId","eIDASLoginButton","width","marginBottom","issueVCBut","userSelection","eidasCard","marginTop","result","credQROffer","mapStateToProps","state","fetching","endpoint","edugainRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK","startSealSession","setTheSealSession","setEidas","uri","setEidasRedirect","setEdugain"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSealSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n  setEdugainUriPort,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.proceedWithEdugainAuth = this.proceedWithEdugainAuth.bind(this);\n    this.proceedWithLocalLDAP = this.proceedWithLocalLDAP.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      (props.sessionData.eidas !== undefined ||\n        props.sessionData.edugain !== undefined);\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      console.log(\n        `eidas.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n      reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      errorUser: req.session.error,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n    }\n    if (this.props.sessionData && this.props.sessionData.edugain) {\n      let toSelect = [this.props.sessionData.edugain];\n      this.props.setEdugainToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n\n        this.props.startSealSessionAndDidAuth(\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        ); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        );\n      }\n    }\n    // let updateUrl = this.props.baseUrl !== \"\"?`${this.props.baseUrl}seal/update-session`:`/seal/update-session`\n    // console.log(updateUrl)\n    let updateUrl =\n      this.props.baseUrl !== \"\"\n        ? `${this.props.baseUrl}seal/update-session`\n        : `/seal/update-session`;\n    // console.log(\"!!!!!!!!!!!!!!!!1\");\n    // console.log(updateUrl);\n    axios\n      .post(updateUrl, {\n        sessionId: this.props.sealSession,\n        variableName: \"ClientCallbackAddr\",\n        variableValue: this.props.eidasRedirectUri,\n      })\n      .then((data) => {\n        console.log(data);\n        console.log(\n          `isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`\n        );      \n      });\n  }\n\n  componentDidUpdate() {\n    // let updateUrl = this.props.baseUrl !== \"\"?`${this.props.baseUrl}seal/update-session`:`/seal/update-session`\n    // axios\n    //   .post(updateUrl, {\n    //     sessionId: this.props.sealSession,\n    //     variableName: \"ClientCallbackAddr\",\n    //     variableValue: this.props.eidasRedirectUri,\n    //   })\n    //   .then((data) => {\n    //     console.log(data)\n    //     console.log(`isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`);\n    //   });\n  }\n\n  proceedWithEidasAuth() {\n    let updateUrl =\n    this.props.baseUrl !== \"\"\n      ? `${this.props.baseUrl}seal/update-session`\n      : `/seal/update-session`;\n  axios\n    .post(updateUrl, {\n      sessionId: this.props.sealSession,\n      variableName: \"ClientCallbackAddr\",\n      variableValue: this.props.eidasRedirectUri,\n    })\n    .then((data) => {\n      console.log(data);\n      console.log(\n        `isErasmusAegean.js:: session updated with ${this.props.eidasRedirectUri}`\n      );\n\n  axios\n      .get(\n        `${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        console.log(`the data is::`);\n        console.log(data);\n        window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });  });\n    }\n    async proceedWithEdugainAuth() {\n      // register the callbackUri to the SessionManager\n      let makeEdugainCallbackToken = await axios.get(\n        `${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`\n      );\n      await axios.post(`${this.props.baseUrl}seal/update-session`, {\n        sessionId: this.props.sealSession,\n        variableName: \"ClientCallbackAddr\",\n        variableValue: `${this.props.eidasRedirectUri}?msToken=${makeEdugainCallbackToken.data.additionalData}`,\n      });\n      await axios.post(`${this.props.baseUrl}seal/update-session`, {\n        sessionId: this.props.sealSession,\n        variableName: \"dataStore\",\n        variableValue: JSON.stringify({}),\n      });\n      console.log(\"edugain.js:: session updated\");\n  \n      axios\n        .get(\n          `${this.props.baseUrl}/vc/make-edugain-token?sessionId=${this.props.sealSession}`\n        )\n        .then((data) => {\n          // console.log(`the data is::`);\n          // console.log(data);\n          let theUrl = this.props.edugainUri.indexOf(\"https\" >= 0)\n            ? this.props.edugainUri\n            : `http://${this.props.edugainUri}`;\n          window.location.href = `${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`;\n          return null;\n        });\n    }\n\n    async proceedWithLocalLDAP() {\n      let sessionFrag = this.props.sealSession\n        ? `?session=${this.props.sealSession}`\n        : \"\";\n      window.location.href = this.props.baseUrl\n        ? `${this.props.baseUrl}uaegean-seal-usability/authenticate${sessionFrag}`\n        : `${this.props.baseUrl}/uaegean-seal-usability/authenticate${sessionFrag}`;\n    }\n\n  render() {\n    let stepNumber =  this.props.vcSent?3:!this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"eIDAS eID, eduGAIN, or email\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sealSession}\n          />\n        </Layout>\n      );\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? (\n      <div>\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <Button\n              onClick={this.proceedWithEidasAuth}\n              style={{ width: \"12rem\", marginBottom: \"0.7rem\" }}\n            >\n              eIDAS eID\n            </Button>\n          </div>\n\n          <div className=\"col text-center\">\n            <Button\n              onClick={this.proceedWithEdugainAuth}\n              style={{ width: \"12rem\", marginBottom: \"0.7rem\" }}\n            >\n              eduGAIN\n            </Button>\n          </div>\n\n\n        </div>\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <Button\n              onClick={this.proceedWithLocalLDAP}\n              style={{ width: \"12rem\", marginBottom: \"0.7rem\" }}\n            >\n              Login with your email\n            </Button>\n          </div>\n        </div>\n      </div>\n    ) : (\n        <Button variant=\"primary\" disabled>\n          Authenticate\n        </Button>\n      );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"SEAL-isErasmusAegean\"}\n      />\n    );\n\n    let eidasCard = this.props.errorUser ? (\n      <div>\n        {\" \"}\n        <p>\n          Your are not registerd as a University of the Aegean Erasmus Student\n        </p>{\" \"}\n        <div>Reason: {this.props.errorUser}</div>\n      </div>\n    ) : (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Issue a myIDs Card, proving your affiliation with UAegean\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to one of the following data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through one of the required data sources\n            (i.e. eIDAS eID or eduGAIN or via e-mail), click the \"Issue\" button to generate\n            and receive your identity card.\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{eIDASLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        credQROffer={this.props.credQROffer}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer,\n    edugainUri: state.edugainUri,\n    edugainPort: state.edugainPort,\n    edugainRedirectUri: state.edugainRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setEdugainToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile)\n      );\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n    setEdugain: (uri, data) => {\n      dispatch(setEdugainUriPort(uri, data));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);\n"]},"metadata":{},"sourceType":"module"}