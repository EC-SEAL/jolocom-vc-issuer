{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri, setEdugainUriPort, setEdugainRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueLinkedVCButtonJolo from \"../../../components/IssueLinkedVCButtonJolo\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.proceedWithEdugainAuth = this.proceedWithEdugainAuth.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.eidas !== undefined && props.sessionData.edugain !== undefined;\n    this.hasEidas = props.sessionData !== null && props.sessionData.eidas !== undefined;\n    this.hasEdugain = props.sessionData !== null && props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession; // console.log(\n      //   `eidas-edugain.js:: in the server the seal session is:: ${req.session.sealSession}`\n      // );\n      // console.log(`eidas-edugain.js setting eidas: ${req.eidasUri} , ${req.eidasPort}`)\n      // console.log(`eidas-edugain.js setting eidas: ${req.eidasRedirectUri} `)\n\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n      reduxStore.dispatch(setEdugainRedirectUri(req.edugainRedirectUri));\n      reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n\n      if (this.props.sessionData.edugain) {\n        toSelect.push(this.props.sessionData.edugain);\n      }\n\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"eidas\", isMobile()); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"eidas\", isMobile());\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID) {\n      //if DID auth is completed\n      if (this.props.sessionData) {\n        if (this.props.sessionData.eidas) {\n          // register the callbackUri to the SessionManager eduGAIN\n          axios.get(`${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`).then(data => {\n            axios.post(`${this.props.baseUrl}seal/update-session`, {\n              sessionId: this.props.sealSession,\n              variableName: \"ClientCallbackAddr\",\n              variableValue: `${this.props.edugainRedirectUri}?msToken=${data.data.additionalData}`\n            }).then(data => {\n              //the edugain ms expects an empty datastore object to exist in session\n              axios.post(`${this.props.baseUrl}seal/update-session`, {\n                sessionId: this.props.sealSession,\n                variableName: \"dataStore\",\n                variableValue: JSON.stringify({})\n              }).then(data => {\n                console.log(\"edugain.js:: session updated\");\n              });\n            });\n          });\n        }\n      } else {\n        //if no session data exists, that means that no user authentication has taken place, i.e. no eIDAS auth since that is the first\n        axios.post(`${this.props.baseUrl}seal/update-session`, {\n          sessionId: this.props.sealSession,\n          variableName: \"ClientCallbackAddr\",\n          variableValue: this.props.eidasRedirectUri\n        }).then(data => {\n          console.log(`eidas.js:: session updated with ${this.props.sealSession}, ClientCallbackAddr and ${this.props.eidasRedirectUri}`);\n        });\n      }\n    }\n  }\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceed  with \");\n    axios.get(`${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`).then(data => {\n      window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  proceedWithEdugainAuth() {\n    axios.get(`${this.props.baseUrl}/vc/make-edugain-token?sessionId=${this.props.sealSession}`).then(data => {\n      let theUrl = this.props.edugainUri.indexOf(\"https\") >= 0 ? this.props.edugainUri : `https://${this.props.edugainUri}`;\n      console.log(\"!!!!!\");\n      console.log(`${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`);\n      window.location.href = `${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasEidas ? this.hasEdugain ? 2 : 3 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"eIDAS-eID\"'\n    }, {\n      title: 'Authenticate over \"eduGAIN\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.vcFailed) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(\"div\", null, \"VC issuance link failure. Please authenticate as the same person on all data sources!\"));\n    }\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sealSession\n      }));\n    }\n\n    let eIDASLoginButton = !this.props.sessionData || !this.props.sessionData.eidas ? __jsx(Button, {\n      onClick: this.proceedWithEidasAuth\n    }, \"eIDAS\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"eIDAS\");\n    let edugainLoginButton = this.props.sessionData && !this.hasRequiredAttributes && this.props.sessionData.eidas ? __jsx(Button, {\n      onClick: this.proceedWithEdugainAuth\n    }, \"eduGAIN\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"eduGAIN\");\n\n    let issueLinkVCBut = __jsx(IssueLinkedVCButtonJolo, {\n      hasRequiredAttributes: this.hasRequiredAttributes,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"SEAL-EIDAS-EDUGAIN\"\n    });\n\n    let credentialCard = this.props.vcFailed ? __jsx(\"div\", null, \" \", __jsx(\"p\", null, \"Linking Failed. The provided attribute sets do not match!\"), \" \", __jsx(\"p\", null, \"Please, make sure you authenticated with the correct credentials on the data sources and try again. \"), \" \") : __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Credential linking your eIDAS-eID with your eduGAIN attributes\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, edugainLoginButton), __jsx(Col, null, issueLinkVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: credentialCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      credQROffer: this.props.credQROffer\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    edugainPort: state.edugainPort,\n    edugainUri: state.edugainUri,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    edugainRedirectUri: state.edugainRedirectUri,\n    vcFailed: state.vcFailed,\n    credQROffer: state.credQROffer\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEidasToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);","map":{"version":3,"sources":["/home/ni/code/js/jolocom-seal-issuer/pages/vc/issue/eidas-edugain.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","makeSealSession","makeSealSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","setEdugainUriPort","setEdugainRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueLinkedVCButtonJolo","PairOrCard","ConnectMobile","isMobile","IssueIsErasmusAegean","Component","constructor","props","dispatch","isFetching","sessionData","proceedWithEidasAuth","bind","proceedWithEdugainAuth","hasRequiredAttributes","undefined","eidas","edugain","hasEidas","hasEdugain","getInitialProps","reduxStore","req","userSessionData","DIDOk","sealSession","session","userData","enpoint","baseUrl","id","DID","eidasUri","eidasPort","eidasRedirectUri","edugainRedirectUri","edugainUri","edugainPort","getState","console","log","qrData","vcSent","componentDidMount","toSelect","push","setEidasToSelection","startSealSessionAndDidAuth","makeConnectionRequest","componentDidUpdate","get","then","data","post","sessionId","variableName","variableValue","additionalData","JSON","stringify","window","location","href","theUrl","indexOf","render","stepNumber","stepperSteps","title","vcFailed","uuid","serverSessionId","eIDASLoginButton","edugainLoginButton","issueLinkVCBut","userSelection","credentialCard","marginTop","result","credQROffer","mapStateToProps","state","fetching","endpoint","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK","startSealSession","setTheSealSession","setEidas","uri","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSealSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n  setEdugainUriPort,\n  setEdugainRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueLinkedVCButtonJolo from \"../../../components/IssueLinkedVCButtonJolo\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.proceedWithEdugainAuth = this.proceedWithEdugainAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.eidas !== undefined &&\n      props.sessionData.edugain !== undefined;\n    this.hasEidas =  props.sessionData !== null && props.sessionData.eidas !== undefined;\n    this.hasEdugain =  props.sessionData !== null && props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      // console.log(\n      //   `eidas-edugain.js:: in the server the seal session is:: ${req.session.sealSession}`\n      // );\n      // console.log(`eidas-edugain.js setting eidas: ${req.eidasUri} , ${req.eidasPort}`)\n      // console.log(`eidas-edugain.js setting eidas: ${req.eidasRedirectUri} `)\n\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n      reduxStore.dispatch(setEdugainRedirectUri(req.edugainRedirectUri));\n      reduxStore.dispatch(setEdugainUriPort(req.edugainUri, req.edugainPort));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      if(this.props.sessionData.edugain){\n        toSelect.push(this.props.sessionData.edugain)\n      }\n\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        this.props.startSealSessionAndDidAuth(\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        ); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        );\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID) {\n      //if DID auth is completed\n\n      if (this.props.sessionData) {\n        if (this.props.sessionData.eidas) {\n          // register the callbackUri to the SessionManager eduGAIN\n          axios\n            .get(\n              `${this.props.baseUrl}/vc/make-edugain-callback-token?sessionId=${this.props.sealSession}`\n            )\n            .then((data) => {\n              axios\n                .post(`${this.props.baseUrl}seal/update-session`, {\n                  sessionId: this.props.sealSession,\n                  variableName: \"ClientCallbackAddr\",\n                  variableValue: `${this.props.edugainRedirectUri}?msToken=${data.data.additionalData}`,\n                })\n                .then((data) => {\n                  //the edugain ms expects an empty datastore object to exist in session\n                  axios\n                    .post(`${this.props.baseUrl}seal/update-session`, {\n                      sessionId: this.props.sealSession,\n                      variableName: \"dataStore\",\n                      variableValue: JSON.stringify({}),\n                    })\n                    .then((data) => {\n                      console.log(\"edugain.js:: session updated\");\n                    });\n                });\n            });\n        }\n      } else {\n        //if no session data exists, that means that no user authentication has taken place, i.e. no eIDAS auth since that is the first\n        axios\n          .post(`${this.props.baseUrl}seal/update-session`, {\n            sessionId: this.props.sealSession,\n            variableName: \"ClientCallbackAddr\",\n            variableValue: this.props.eidasRedirectUri,\n          })\n          .then((data) => {\n            console.log(\n              `eidas.js:: session updated with ${this.props.sealSession}, ClientCallbackAddr and ${this.props.eidasRedirectUri}`\n            );\n          });\n      }\n    }\n  }\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceed  with \");\n    axios\n      .get(\n        `${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n  }\n\n  proceedWithEdugainAuth() {\n    axios\n      .get(\n        `${this.props.baseUrl}/vc/make-edugain-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        let theUrl = this.props.edugainUri.indexOf(\"https\") >= 0\n          ? this.props.edugainUri\n          : `https://${this.props.edugainUri}`;\n\n          console.log(\"!!!!!\")\n          console.log(`${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`)\n          window.location.href = `${theUrl}:${this.props.edugainPort}/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : ( (this.hasEidas ? (this.hasEdugain?2:3) : 1));\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"eIDAS-eID\"' },\n      { title: 'Authenticate over \"eduGAIN\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n    if(this.props.vcFailed){\n      return (<Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n       <div>\n         VC issuance link failure. Please authenticate as the same person on all data sources!\n       </div>\n      </Layout>)\n\n    }\n\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sealSession}\n          />\n        </Layout>\n      );\n    }\n\n    let eIDASLoginButton =\n      !this.props.sessionData || !this.props.sessionData.eidas ? (\n        <Button onClick={this.proceedWithEidasAuth}>eIDAS</Button>\n      ) : (\n        <Button variant=\"primary\" disabled>\n          eIDAS\n        </Button>\n      );\n\n    let edugainLoginButton =\n      this.props.sessionData &&\n      !this.hasRequiredAttributes &&\n      this.props.sessionData.eidas ? (\n        <Button onClick={this.proceedWithEdugainAuth}>eduGAIN</Button>\n      ) : (\n        <Button variant=\"primary\" disabled>\n          eduGAIN\n        </Button>\n      );\n\n    let issueLinkVCBut = (\n      <IssueLinkedVCButtonJolo\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"SEAL-EIDAS-EDUGAIN\"}\n      />\n    );\n\n    let credentialCard = this.props.vcFailed ? (<div> <p>Linking Failed. The provided attribute sets do not match!</p> <p>Please, make sure you authenticated with the correct credentials on the data sources and try again. </p> </div>) : \n     (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Issue a Credential linking your eIDAS-eID with your eduGAIN attributes\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{eIDASLoginButton}</Col>\n              <Col>{edugainLoginButton}</Col>\n              <Col>{issueLinkVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={credentialCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        credQROffer={this.props.credQROffer}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    edugainPort: state.edugainPort,\n    edugainUri: state.edugainUri,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    edugainRedirectUri: state.edugainRedirectUri,\n    vcFailed: state.vcFailed,\n    credQROffer: state.credQROffer,\n    \n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile)\n      );\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(IssueIsErasmusAegean);\n"]},"metadata":{},"sourceType":"module"}