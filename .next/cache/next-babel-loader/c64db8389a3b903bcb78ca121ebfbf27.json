{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nvar IssueIsErasmusAegean = /*#__PURE__*/function (_React$Component) {\n  _inherits(IssueIsErasmusAegean, _React$Component);\n\n  var _super = _createSuper(IssueIsErasmusAegean);\n\n  function IssueIsErasmusAegean(props) {\n    var _this;\n\n    _classCallCheck(this, IssueIsErasmusAegean);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData;\n    _this.proceedWithEidasAuth = _this.proceedWithEidasAuth.bind(_assertThisInitialized(_this));\n    _this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.eidas !== undefined;\n    return _this;\n  }\n\n  _createClass(IssueIsErasmusAegean, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.sessionData && this.props.sessionData.eidas) {\n        var toSelect = [this.props.sessionData.eidas];\n        this.props.setEidasToSelection(toSelect);\n      }\n\n      if (!this.props.DID) {\n        //if DID auth has not been completed\n        // console.log(`${new Date()} DID not found`);\n        if (!this.props.sealSession) {\n          // console.log(\"startSealSessionAndDidAuth\")\n          console.log(\"isMobile \".concat(isMobile()));\n          this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"eidas\", isMobile()); //and then makeConnectionRequest\n        } else {\n          // console.log(\"makeConnectionRequest\")\n          console.log(\"isMobile \".concat(isMobile()));\n          this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"eidas\", isMobile());\n        }\n      } // console.log(`will post to update session at ${this.props.baseUrl}seal/update-session`)\n      // axios\n      //   .post(`${this.props.baseUrl}seal/update-session`, {\n      //     sessionId: this.props.sealSession,\n      //     variableName: \"ClientCallbackAddr\",\n      //     variableValue: this.props.eidasRedirectUri,\n      //   })\n      //   .then((data) => {\n      //     console.log(`isErasmusAegean.js:: session updated with callback ${this.props.eidasRedirectUri}`);\n      //   });\n\n    }\n  }, {\n    key: \"proceedWithEidasAuth\",\n    value: function proceedWithEidasAuth() {\n      var _this2 = this;\n\n      //make msToken\n      console.log(\"proceed  with \");\n      axios.get(\"\".concat(this.props.baseUrl, \"/vc/make-eidas-token?sessionId=\").concat(this.props.sealSession)).then(function (data) {\n        console.log(\"the data is::\");\n        console.log(data);\n        window.location.href = \"http://\".concat(_this2.props.eidasUri, \":\").concat(_this2.props.eidasPort, \"/eidas-idp/is/query?msToken=\").concat(data.data.additionalData);\n        return null;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n      var stepperSteps = [{\n        title: \"Pair your wallet\"\n      }, {\n        title: 'Authenticate over \"eIDAS-eID\"'\n      }, {\n        title: \"Request Issuance\"\n      }];\n\n      if (this.props.qrData && isMobile() && !this.props.DID) {\n        return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n          steps: stepperSteps,\n          activeNum: stepNumber\n        }))), __jsx(ConnectMobile, {\n          baseUrl: this.props.baseUrl,\n          qrData: this.props.qrData,\n          DID: this.props.DID,\n          uuid: this.props.uuid,\n          serverSessionId: this.props.serverSessionId,\n          sealSession: this.props.sealSession\n        }));\n      }\n\n      var eIDASLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n        onClick: this.proceedWithEidasAuth\n      }, \"eIDAS\") : __jsx(Button, {\n        variant: \"primary\",\n        disabled: true\n      }, \"eIDAS\");\n\n      var issueVCBut = __jsx(IssueVCButton, {\n        hasRequiredAttributes: this.hasRequiredAttributes,\n        baseUrl: this.props.baseUrl,\n        userSelection: this.props.userSelection,\n        uuid: this.props.sealSession,\n        vcType: \"SEAL-isErasmusAegean\"\n      });\n\n      var eidasCard = __jsx(Card, {\n        className: \"text-center\",\n        style: {\n          marginTop: \"2rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue a Verifiable Credential proving you are an Erasmus student @UAegean\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, issueVCBut)))));\n\n      var result = __jsx(PairOrCard, {\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        baseUrl: this.props.baseUrl,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        card: eidasCard,\n        vcSent: this.props.vcSent,\n        sealSession: this.props.sealSession\n      });\n\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), result, __jsx(Row, null, __jsx(HomeButton, {\n        baseUrl: this.props.baseUrl\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var reduxStore, req, userSessionData, DIDOk, sealSession, baseUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reduxStore = _ref.reduxStore, req = _ref.req;\n\n                if (false) {\n                  userSessionData = req.session.userData;\n                  reduxStore.dispatch(setEndpoint(req.session.enpoint));\n                  baseUrl = req.session.baseUrl ? \"/\".concat(req.session.baseUrl, \"/\") : \"\";\n                  reduxStore.dispatch(setBaseUrl(baseUrl));\n                  reduxStore.dispatch(setServerSessionId(req.session.id));\n                  DIDOk = req.session.DID;\n                  sealSession = req.session.sealSession;\n                  console.log(\"eidas.js:: in the server the seal session is:: \".concat(req.session.sealSession));\n                  reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n                  reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n                } else {\n                  if (reduxStore.getState().sessionData) {\n                    userSessionData = reduxStore.getState().sessionData;\n                    DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n                    sealSession = reduxStore.getState().sealSession;\n                  } else {\n                    console.log(\"no server session data found\");\n                  }\n                } //this way the userSessionData gets set in all settings\n\n\n                if (userSessionData) {\n                  reduxStore.dispatch(setSessionData(userSessionData));\n                }\n\n                if (DIDOk) {\n                  reduxStore.dispatch(completeDIDAuth(sealSession));\n                }\n\n                if (sealSession) {\n                  reduxStore.dispatch(setSealSession(sealSession));\n                } //returned value here is getting mered with the mapstatetoprops\n                // mapstatetoprops overrides these values if they match\n\n\n                return _context.abrupt(\"return\", {\n                  sessionData: userSessionData,\n                  qrData: reduxStore.getState().qrData,\n                  vcSent: false,\n                  sealSession: reduxStore.getState().sealSession\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IssueIsErasmusAegean;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setEidasToSelection: function setEidasToSelection(set) {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: function setSteps(steps) {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: function setEndPoint(endpont) {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: function makeConnectionRequest(sealSession, baseUrl, vcType, isMobile) {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: function didAuthOK(uuid) {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: function startSealSession(baseUrl) {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: function () {\n      var _startSealSessionAndDidAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(baseUrl, vcType, isMobile) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function startSealSessionAndDidAuth(_x2, _x3, _x4) {\n        return _startSealSessionAndDidAuth.apply(this, arguments);\n      }\n\n      return startSealSessionAndDidAuth;\n    }(),\n    setTheSealSession: function setTheSealSession(sessionId) {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: function setEidas(uri, data) {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: function setEidasRedirect(uri) {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);","map":{"version":3,"sources":["/home/ni/code/js/seal-issuer/pages/vc/issue/isErasmusAegean.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","makeSealSession","makeSealSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","ConnectMobile","isMobile","IssueIsErasmusAegean","props","dispatch","isFetching","sessionData","proceedWithEidasAuth","bind","hasRequiredAttributes","undefined","eidas","toSelect","setEidasToSelection","DID","sealSession","console","log","startSealSessionAndDidAuth","baseUrl","makeConnectionRequest","get","then","data","window","location","href","eidasUri","eidasPort","additionalData","stepNumber","stepperSteps","title","qrData","uuid","serverSessionId","eIDASLoginButton","issueVCBut","userSelection","eidasCard","marginTop","result","vcSent","reduxStore","req","userSessionData","session","userData","enpoint","id","DIDOk","eidasRedirectUri","getState","Component","mapStateToProps","state","fetching","endpoint","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK","startSealSession","setTheSealSession","sessionId","setEidas","uri","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSealSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      console.log(\n        `eidas.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n\n        this.props.startSealSessionAndDidAuth(\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        ); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        );\n      }\n    }\n\n    // console.log(`will post to update session at ${this.props.baseUrl}seal/update-session`)\n    // axios\n    //   .post(`${this.props.baseUrl}seal/update-session`, {\n    //     sessionId: this.props.sealSession,\n    //     variableName: \"ClientCallbackAddr\",\n    //     variableValue: this.props.eidasRedirectUri,\n    //   })\n    //   .then((data) => {\n    //     console.log(`isErasmusAegean.js:: session updated with callback ${this.props.eidasRedirectUri}`);\n    //   });\n\n  }\n\n\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceed  with \");\n    axios\n      .get(\n        `${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        console.log(`the data is::`);\n        console.log(data);\n        window.location.href = `http://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"eIDAS-eID\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sealSession}\n          />\n        </Layout>\n      );\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? (\n      <Button onClick={this.proceedWithEidasAuth}>eIDAS</Button>\n    ) : (\n        <Button variant=\"primary\" disabled>\n          eIDAS\n        </Button>\n      );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"SEAL-isErasmusAegean\"}\n      />\n    );\n\n    let eidasCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>Issue a Verifiable Credential proving you are an Erasmus student @UAegean</Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{eIDASLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: async (baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile)\n      );\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);\n"]},"metadata":{},"sourceType":"module"}