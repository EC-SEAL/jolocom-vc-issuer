{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`eidas.js:: in the server the seal session is:: ${req.session.sealSession}`);\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"eidas\", isMobile()); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"eidas\", isMobile());\n      }\n    }\n\n    axios.post(`${this.props.baseUrl}seal/update-session`, {\n      sessionId: this.props.sealSession,\n      variableName: \"ClientCallbackAddr\",\n      variableValue: this.props.eidasRedirectUri\n    }).then(data => {\n      console.log(`isErasmusAegean.js:: session updated with callback ${this.props.eidasRedirectUri}`);\n    });\n  }\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceed  with \");\n    axios.get(`${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`).then(data => {\n      console.log(`the data is::`);\n      console.log(data);\n      window.location.href = `http://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"eIDAS-eID\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sealSession\n      }));\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n      onClick: this.proceedWithEidasAuth\n    }, \"eIDAS\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"eIDAS\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"SEAL-isErasmusAegean\"\n    });\n\n    let eidasCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Verifiable Credential proving you are an Erasmus student @UAegean\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: eidasCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEidasToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);","map":{"version":3,"sources":["/home/ni/code/js/seal-issuer/pages/vc/issue/isErasmusAegean.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","makeSealSession","makeSealSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","ConnectMobile","isMobile","IssueIsErasmusAegean","Component","constructor","props","dispatch","isFetching","sessionData","proceedWithEidasAuth","bind","hasRequiredAttributes","undefined","eidas","getInitialProps","reduxStore","req","userSessionData","DIDOk","sealSession","session","userData","enpoint","baseUrl","id","DID","console","log","eidasUri","eidasPort","eidasRedirectUri","getState","qrData","vcSent","componentDidMount","toSelect","setEidasToSelection","startSealSessionAndDidAuth","makeConnectionRequest","post","sessionId","variableName","variableValue","then","data","get","window","location","href","additionalData","render","stepNumber","stepperSteps","title","uuid","serverSessionId","eIDASLoginButton","issueVCBut","userSelection","eidasCard","marginTop","result","mapStateToProps","state","fetching","endpoint","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK","startSealSession","setTheSealSession","setEidas","uri","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSealSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../helpers/isMobile\";\n\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueIsErasmusAegean extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      console.log(\n        `eidas.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n    }\n    if (sealSession) {\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      // console.log(`${new Date()} DID not found`);\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n\n        this.props.startSealSessionAndDidAuth(\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        ); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        );\n      }\n    }\n\n    axios\n      .post(`${this.props.baseUrl}seal/update-session`, {\n        sessionId: this.props.sealSession,\n        variableName: \"ClientCallbackAddr\",\n        variableValue: this.props.eidasRedirectUri,\n      })\n      .then((data) => {\n        console.log(`isErasmusAegean.js:: session updated with callback ${ this.props.eidasRedirectUri}`);\n      });\n\n  }\n\n\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceed  with \");\n    axios\n      .get(\n        `${this.props.baseUrl}/vc/make-eidas-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        console.log(`the data is::`);\n        console.log(data);\n        window.location.href = `http://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"eIDAS-eID\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sealSession}\n          />\n        </Layout>\n      );\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? (\n      <Button onClick={this.proceedWithEidasAuth}>eIDAS</Button>\n    ) : (\n        <Button variant=\"primary\" disabled>\n          eIDAS\n        </Button>\n      );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"SEAL-isErasmusAegean\"}\n      />\n    );\n\n    let eidasCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>Issue a Verifiable Credential proving you are an Erasmus student @UAegean</Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{eIDASLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile)\n      );\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueIsErasmusAegean);\n"]},"metadata":{},"sourceType":"module"}